/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.5/userguide/custom_plugins.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'eclipse'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation gradleApi()
    implementation 'io.github.openfeign.querydsl:querydsl-sql-codegen:' + providers.systemProperty('querydsl.version').get()
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.10.0')
        }

        // Create a new test suite
        functionalTest(JvmTestSuite) {
            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation project()
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure { shouldRunAfter(test) } 
                }
            }
        }
    }
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'io.github.openfeign.querydsl.gradle.greeting'
            implementationClass = 'io.github.openfeign.querydsl.gradle.QuerydslGradlePlugin'
        }
    }
}

eclipse {
    classpath {
       downloadSources=true
    }
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Include functionalTest as part of the check lifecycle
    dependsOn(testing.suites.functionalTest)
}
