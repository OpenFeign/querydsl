<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect1 id="collections_integration" revision="1">

  <title>Querying Collections</title>

  <para>The querydsl-collections module can be used with generated query types and
    without.
    The first section describes the usage without generated query types:
  </para>

  <sect2>
    <title>Usage without generated query types</title>

    <para>
      To use querydsl-collections without generated query types you need to
      use the
      Querydsl alias feature. Here are some examples.
    </para>

    <para>
      To get started, add the following static imports:
    </para>

    <programlisting language="java"><![CDATA[
// needed for access of the Querydsl Collections API
import static com.querydsl.collections.CollQueryFactory.*;
// needed, if you use the $-invocations
import static com.querydsl.core.alias.Alias.*;
]]></programlisting>

    <para>
      And now create an alias instance for the Cat class. Alias instances can only be
      created for non-final classes with an empty constructor. Make sure your class has one.
    </para>

    <para>
      The alias instance of type Cat and its getter invocations are
      transformed into paths by wrapping them into dollar method invocations.
      The call
      <code>c.getKittens()</code>
      for example is internally
      transformed into the property path <code>c.kittens</code> inside the
      dollar method.
    </para>

    <programlisting language="java"><![CDATA[
Cat c = alias(Cat.class, "cat");
for (String name : select($(c.getName())).from($(c),cats)
  .where($(c.getKittens()).size().gt(0))
  .fetch()) {
    System.out.println(name);
}
]]></programlisting>

    <para>
      The following example is a variation of the previous, where the access
      to the
      list size happens inside the dollar-method invocation.
    </para>

    <programlisting language="java"><![CDATA[
Cat c = alias(Cat.class, "cat");
for (String name : select($(c.getName())).from($(c),cats)
  .where($(c.getKittens().size()).gt(0))
  .fetch()) {
    System.out.println(name);
}
]]></programlisting>

    <para>
      All non-primitive and non-final typed properties of aliases are aliases
      themselves. So you may cascade method calls until you hit a
      primitive or non-final type (e.g. java.lang.String) in the dollar-method scope.
    </para>

    <para>
      e.g.
    </para>

    <programlisting language="java"><![CDATA[
$(c.getMate().getName())
]]></programlisting>

    <para>
      is transformed into
      <emphasis>c.mate.name</emphasis>
      internally, but
    </para>

    <programlisting language="java"><![CDATA[
$(c.getMate().getName().toLowerCase())
]]></programlisting>

    <para>
      is not transformed properly, since the toLowerCase() invocation is not tracked.
    </para>
    <para>
      Note also that you may only invoke getters, size(), contains(Object) and
      get(int) on alias types. All other invocations throw exceptions.
    </para>

  </sect2>

  <sect2>

    <title>Usage with generated query types</title>

    <para>
      The example above can be expressed like this with generated expression types
    </para>

    <programlisting language="java"><![CDATA[
QCat cat = new QCat("cat");
for (String name : select(cat.name).from(cat,cats)
  .where(cat.kittens.size().gt(0))
  .fetch()) {
    System.out.println(name);
}
]]></programlisting>

    <para>When you use generated query types, you instantiate expressions instead of alias
      instances
      and use the property paths directly without any dollar-method wrapping.
    </para>

  </sect2>

  <sect2>

    <title>Maven integration</title>

    <para>
      Add the following dependencies to your Maven project:
    </para>

    <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>io.github.openfeign.querydsl</groupId>
  <artifactId>querydsl-apt</artifactId>
  <version>${querydsl.version}</version>
  <scope>provided</scope>
</dependency>

<dependency>
  <groupId>io.github.openfeign.querydsl</groupId>
  <artifactId>querydsl-collections</artifactId>
  <version>${querydsl.version}</version>
</dependency>
]]></programlisting>


    <para>
      If you are not using JPA or JDO you can generate expression types for your
      domain types by
      annotating them with the
      <code>com.querydsl.core.annotations.QueryEntity</code>
      annotation and adding the
      following plugin configuration into your Maven configuration (pom.xml):
    </para>

    <programlisting language="xml"><![CDATA[
<project>
  <build>
  <plugins>
    ...
    <plugin>
      <groupId>com.mysema.maven</groupId>
      <artifactId>apt-maven-plugin</artifactId>
      <version>1.1.3</version>
      <executions>
        <execution>
          <goals>
            <goal>process</goal>
          </goals>
          <configuration>
            <outputDirectory>target/generated-sources/java</outputDirectory>
            <processor>com.querydsl.apt.QuerydslAnnotationProcessor</processor>
          </configuration>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
  </build>
</project>
]]></programlisting>

  </sect2>

  <sect2>

    <title>Ant integration</title>

    <para>Place the jar files from the full-deps bundle on your classpath and use the
      following tasks for Querydsl code generation:
    </para>

    <programlisting language="xml"><![CDATA[
    <!-- APT based code generation -->
    <javac srcdir="${src}" classpathref="cp">
      <compilerarg value="-proc:only"/>
      <compilerarg value="-processor"/>
      <compilerarg value="com.querydsl.apt.QuerydslAnnotationProcessor"/>
      <compilerarg value="-s"/>
      <compilerarg value="${generated}"/>
    </javac>

    <!-- compilation -->
    <javac classpathref="cp" destdir="${build}">
      <src path="${src}"/>
      <src path="${generated}"/>
    </javac>
]]></programlisting>

    <para>
      Replace
      <emphasis>src</emphasis>
      with your main source folder,
      <emphasis>generated</emphasis>
      with your folder for generated sources and
      <emphasis>build</emphasis>
      with your target folder.
    </para>

  </sect2>

  <sect2>

    <title>Hamcrest matchers</title>

    <para>Querydsl Collections provides Hamcrest matchers. With these imports</para>

    <programlisting language="java"><![CDATA[
import static org.hamcrest.core.IsEqual.equalTo;
import static com.querydsl.collections.PathMatcher.hasValue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
]]></programlisting>

    <para>they can be used like this:</para>

    <programlisting language="java"><![CDATA[
Car car = new Car();
car.setHorsePower(123);

assertThat(car, hasValue($.horsePower));
assertThat(car, hasValue($.horsePower, equalTo(123)));
]]></programlisting>

    <para>
      The Hamcrest matchers have been contributed by
      <ulink url="https://github.com/jeroenvs">Jeroen van Schagen</ulink>
      .
    </para>

  </sect2>

  <sect2>

    <title>Usage with the Eclipse Compiler for Java</title>

    <para>If Querydsl Collections is used with a JRE where the system compiler is not available,
    CollQuery instances can also be configured to use the Eclipse Compiler for Java (ECJ) instead:</para>

    <programlisting language="java"><![CDATA[
DefaultEvaluatorFactory evaluatorFactory = new DefaultEvaluatorFactory(
    CollQueryTemplates.DEFAULT,
    new ECJEvaluatorFactory(getClass().getClassLoader()));
QueryEngine queryEngine = new DefaultQueryEngine(evaluatorFactory);
CollQuery query = new CollQuery(queryEngine);
]]></programlisting>

  </sect2>

</sect1>