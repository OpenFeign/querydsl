<sect1 id="result_handling">

  <title>Result handling</title>

  <para>Querydsl provides two ways to customize results, FactoryExpressions for row based transformation
  and ResultTransformer for aggregation.</para>

  <para>The <code>com.querydsl.core.types.FactoryExpression</code> interface is used for Bean creation,
  constructor invocation and for the creation of more complex objects. The functionality of the
  FactoryExpression implementations of Querydsl can be accessed via the
  <code>com.querydsl.core.types.Projections</code> class.</para>

  <para>For the <code>com.querydsl.core.ResultTransformer</code> interface <code>GroupBy</code> is the
  main implementation.</para>

  <sect2>

    <title>Returning multiple columns</title>

    <para>Since Querydsl 3.0 the default type for multi-column results is <code>com.querydsl.core.Tuple</code>.
    Tuple provides a typesafe Map like interface to access column data from a Tuple row object.</para>

    <programlisting language="java"><![CDATA[
List<Tuple> result = query.select(employee.firstName, employee.lastName)
                          .from(employee).fetch();
for (Tuple row : result) {
     System.out.println("firstName " + row.get(employee.firstName));
     System.out.println("lastName " + row.get(employee.lastName));
}}
]]></programlisting>

    <para>This example could also have been written via the QTuple expression class like this</para>

    <programlisting language="java"><![CDATA[
List<Tuple> result = query.select(new QTuple(employee.firstName, employee.lastName))
                          .from(employee).fetch();
for (Tuple row : result) {
     System.out.println("firstName " + row.get(employee.firstName));
     System.out.println("lastName " + row.get(employee.lastName));
}}
]]></programlisting>

  </sect2>

  <sect2>

    <title>Bean population</title>

    <para>In cases where Beans need to be populated based on the results of the query, Bean projections
    can be used like this</para>

    <programlisting language="java"><![CDATA[
List<UserDTO> dtos = query.select(
    Projections.bean(UserDTO.class, user.firstName, user.lastName)).fetch();
]]></programlisting>

   <para>When fields should be directly used instead of setters the following variant can be
   used instead</para>

<programlisting language="java"><![CDATA[
List<UserDTO> dtos = query.select(
    Projections.fields(UserDTO.class, user.firstName, user.lastName)).fetch();
]]></programlisting>

  </sect2>

  <sect2>
    <title>Constructor usage</title>

    <para>Constructor based row transformation can be used like this</para>

    <programlisting language="java"><![CDATA[
List<UserDTO> dtos = query.select(
    Projections.constructor(UserDTO.class, user.firstName, user.lastName)).fetch();
]]></programlisting>

    <para>As an alternative to the generic Constructor expression usage constructors
    can also be annotated with the <code>QueryProjection</code> annotation:
    </para>

    <programlisting language="java"><![CDATA[
class CustomerDTO {

  @QueryProjection
  public CustomerDTO(long id, String name) {
     ...
  }

}
]]></programlisting>

    <para>And then you can use it like this in the query</para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
JPQLQuery query = new HibernateQuery(session);
List<CustomerDTO> dtos = query.select(new QCustomerDTO(customer.id, customer.name))
                              .from(customer).fetch();
]]></programlisting>

    <para>While the example is Hibernate specific, this feature is
      available in all modules.
    </para>

    <para>If the type with the QueryProjection annotation is not an annotated entity
      type, you can use the constructor projection like in the example, but if the
      annotated type would be an entity type, then the constructor projection would need to be
      created via a call to the static create method of the query type:
    </para>

    <programlisting language="java"><![CDATA[
@Entity
class Customer {

  @QueryProjection
  public Customer(long id, String name) {
     ...
  }

}
]]></programlisting>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
JPQLQuery query = new HibernateQuery(session);
List<Customer> dtos = query.select(QCustomer.create(customer.id, customer.name))
                           .from(customer).fetch();
]]></programlisting>

    <para>Alternatively, if code generation is not an option, you can
      create a constructor projection like this:
    </para>

    <programlisting language="java"><![CDATA[
List<Customer> dtos = query
    .select(Projections.constructor(Customer.class, customer.id, customer.name))
    .from(customer).fetch();
]]></programlisting>

  </sect2>

  <sect2>

    <title>Result aggregation</title>

    <para>
      The
      <code>com.querydsl.core.group.GroupBy</code>
      class provides aggregation functionality which can be used to aggregate query results
      in memory. Below are some usage examples.
    </para>

    <para>
      Aggregating parent child relations
    </para>

    <programlisting language="java"><![CDATA[
import static com.querydsl.core.group.GroupBy.*;

Map<Integer, List<Comment>> results = query.from(post, comment)
    .where(comment.post.id.eq(post.id))
    .transform(groupBy(post.id).as(list(comment)));
]]></programlisting>

    <para>This will return a map of post ids to related comments.</para>

    <para>Multiple result columns</para>

    <programlisting language="java"><![CDATA[
Map<Integer, Group> results = query.from(post, comment)
    .where(comment.post.id.eq(post.id))
    .transform(groupBy(post.id).as(post.name, set(comment.id)));
]]></programlisting>

    <para>This will return a map of post ids to Group instances with
      access to post name
      and comment ids.
    </para>

    <para>Group is the GroupBy equivalent to the Tuple interface.</para>

    <para>
      More examples can be found
      <ulink
        url="https://github.com/querydsl/querydsl/blob/master/querydsl-collections/src/test/java/com/querydsl/collections/GroupByTest.java"
      >here</ulink>
      .
    </para>

  </sect2>

</sect1>
